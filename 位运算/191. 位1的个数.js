// 编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。

// 提示：

// 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
// 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3
/**
 * @param {number} n - a positive integer
 * @return {number}
 */

//位运算： x&(x-1)去掉最低位1，全为0时表示去掉所有1
var hammingWeight = function (n) {
  let len = 0
  while (n) {
    len++
    n = n & (n - 1)
  }
  return len
}

//让 n 与 2^i进行与运算，当且仅当 n 的第 i 位为 1 时，运算结果不为 0。
var hammingWeight = function(n){
  let len = 0;
  for(let i = 0; i<32; ++i){
    if((n&(1<<i))!=0){
      len++;
    }
  }
  return len;
}

var hammingWeight = function(n){
  let len = 0;
  let mask = 1;
  for(let i = 1; i<=32;++i){
    if(n&mask) len++;  //n的最后一位是1
    mask = mask<<1;  //1 10 100每次左移一位，同上
  }
  return len;
}

/* 
示例 2：

输入：00000000000000000000000010000000
输出：1
解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。

示例 3：
输入：11111111111111111111111111111101
输出：31
解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
 

提示：

输入必须是长度为 32 的二进制

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/number-of-1-bits
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 */
